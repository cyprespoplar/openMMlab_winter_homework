{"env_info": "sys.platform: win32\nPython: 3.8.0 (default, Nov  6 2019, 16:00:02) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1050 Ti\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.32.31332 \u7248\nGCC: n/a\nPyTorch: 1.10.2+cu113\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: NO AVX\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/w/b/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, \n\nTorchVision: 0.11.3+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 193231332\nMMCV CUDA Compiler: 11.8\nMMClassification: 0.25.0+", "seed": 564875034, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV2', widen_factor=1.0),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=1280,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, )))\nload_from = './mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='./data/flower_dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='./data/flower_dataset/val',\n        ann_file='./data/flower_dataset/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='./data/flower_dataset/test',\n        ann_file='./data/flower_dataset/test.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', gamma=0.98, step=1)\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs\\mobilenet-v2_flower'\ngpu_ids = range(0, 1)\ndevice = 'cuda'\nseed = 564875034\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.005, "memory": 2455, "data_time": 1.12049, "loss": 1.20745, "time": 3.13436}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.005, "memory": 2455, "data_time": 0.0694, "loss": 0.48329, "time": 1.13039}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.005, "memory": 2455, "data_time": 0.06704, "loss": 0.71887, "time": 1.1235}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.005, "memory": 2455, "data_time": 0.0682, "loss": 0.37913, "time": 1.12737}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.005, "memory": 2455, "data_time": 0.06775, "loss": 0.36205, "time": 1.12706}
{"mode": "val", "epoch": 1, "iter": 18, "lr": 0.005, "accuracy_top-1": 85.56339, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0049, "memory": 2455, "data_time": 0.22228, "loss": 0.33344, "time": 1.28141}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0049, "memory": 2455, "data_time": 0.06925, "loss": 0.54171, "time": 1.12439}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.0049, "memory": 2455, "data_time": 0.06936, "loss": 0.36838, "time": 1.13006}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.0049, "memory": 2455, "data_time": 0.06721, "loss": 0.55224, "time": 1.12865}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0049, "memory": 2455, "data_time": 0.06603, "loss": 0.47075, "time": 1.12184}
{"mode": "val", "epoch": 2, "iter": 18, "lr": 0.0049, "accuracy_top-1": 84.33099, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.0048, "memory": 2455, "data_time": 0.24164, "loss": 0.35449, "time": 1.29755}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.0048, "memory": 2455, "data_time": 0.06907, "loss": 0.37378, "time": 1.12378}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.0048, "memory": 2455, "data_time": 0.06897, "loss": 0.34825, "time": 1.12361}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.0048, "memory": 2455, "data_time": 0.06759, "loss": 0.23378, "time": 1.12082}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0048, "memory": 2455, "data_time": 0.06714, "loss": 0.44847, "time": 1.12164}
{"mode": "val", "epoch": 3, "iter": 18, "lr": 0.0048, "accuracy_top-1": 91.02113, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00471, "memory": 2455, "data_time": 0.22644, "loss": 0.34852, "time": 1.27839}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00471, "memory": 2455, "data_time": 0.06891, "loss": 0.39901, "time": 1.12182}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00471, "memory": 2455, "data_time": 0.06793, "loss": 0.30308, "time": 1.12526}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.00471, "memory": 2455, "data_time": 0.06663, "loss": 0.23846, "time": 1.12046}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00471, "memory": 2455, "data_time": 0.06952, "loss": 0.29188, "time": 1.12521}
{"mode": "val", "epoch": 4, "iter": 18, "lr": 0.00471, "accuracy_top-1": 92.60564, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00461, "memory": 2455, "data_time": 0.22333, "loss": 0.29585, "time": 1.27529}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00461, "memory": 2455, "data_time": 0.06747, "loss": 0.27147, "time": 1.12563}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00461, "memory": 2455, "data_time": 0.0661, "loss": 0.1934, "time": 1.12032}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.00461, "memory": 2455, "data_time": 0.06708, "loss": 0.21137, "time": 1.12174}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00461, "memory": 2455, "data_time": 0.06733, "loss": 0.19528, "time": 1.1211}
{"mode": "val", "epoch": 5, "iter": 18, "lr": 0.00461, "accuracy_top-1": 87.85211, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00452, "memory": 2455, "data_time": 0.22235, "loss": 0.29335, "time": 1.27374}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.00452, "memory": 2455, "data_time": 0.06766, "loss": 0.20634, "time": 1.12108}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.00452, "memory": 2455, "data_time": 0.06749, "loss": 0.19637, "time": 1.12216}
{"mode": "train", "epoch": 6, "iter": 40, "lr": 0.00452, "memory": 2455, "data_time": 0.06737, "loss": 0.24906, "time": 1.12309}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00452, "memory": 2455, "data_time": 0.06721, "loss": 0.1961, "time": 1.12118}
{"mode": "val", "epoch": 6, "iter": 18, "lr": 0.00452, "accuracy_top-1": 93.1338, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00443, "memory": 2455, "data_time": 0.22439, "loss": 0.19538, "time": 1.27537}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.00443, "memory": 2455, "data_time": 0.0678, "loss": 0.15372, "time": 1.12335}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.00443, "memory": 2455, "data_time": 0.06709, "loss": 0.15794, "time": 1.12258}
{"mode": "train", "epoch": 7, "iter": 40, "lr": 0.00443, "memory": 2455, "data_time": 0.0676, "loss": 0.2106, "time": 1.12261}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00443, "memory": 2455, "data_time": 0.06736, "loss": 0.25155, "time": 1.12214}
{"mode": "val", "epoch": 7, "iter": 18, "lr": 0.00443, "accuracy_top-1": 92.78169, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00434, "memory": 2455, "data_time": 0.22121, "loss": 0.17657, "time": 1.27155}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.00434, "memory": 2455, "data_time": 0.06869, "loss": 0.19712, "time": 1.1219}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.00434, "memory": 2455, "data_time": 0.06851, "loss": 0.22657, "time": 1.12276}
{"mode": "train", "epoch": 8, "iter": 40, "lr": 0.00434, "memory": 2455, "data_time": 0.06791, "loss": 0.19479, "time": 1.12202}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.00434, "memory": 2455, "data_time": 0.06691, "loss": 0.24556, "time": 1.11941}
{"mode": "val", "epoch": 8, "iter": 18, "lr": 0.00434, "accuracy_top-1": 93.83803, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00425, "memory": 2455, "data_time": 0.22329, "loss": 0.20597, "time": 1.27462}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00425, "memory": 2455, "data_time": 0.06885, "loss": 0.17867, "time": 1.12346}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.00425, "memory": 2455, "data_time": 0.06699, "loss": 0.12, "time": 1.12225}
{"mode": "train", "epoch": 9, "iter": 40, "lr": 0.00425, "memory": 2455, "data_time": 0.06807, "loss": 0.17864, "time": 1.12948}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00425, "memory": 2455, "data_time": 0.06206, "loss": 0.18988, "time": 1.11568}
{"mode": "val", "epoch": 9, "iter": 18, "lr": 0.00425, "accuracy_top-1": 93.30986, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00417, "memory": 2455, "data_time": 0.22542, "loss": 0.16758, "time": 1.27618}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00417, "memory": 2455, "data_time": 0.06882, "loss": 0.18699, "time": 1.124}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.00417, "memory": 2455, "data_time": 0.06722, "loss": 0.18815, "time": 1.12327}
{"mode": "train", "epoch": 10, "iter": 40, "lr": 0.00417, "memory": 2455, "data_time": 0.06779, "loss": 0.13676, "time": 1.12255}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.00417, "memory": 2455, "data_time": 0.0681, "loss": 0.14903, "time": 1.12313}
{"mode": "val", "epoch": 10, "iter": 18, "lr": 0.00417, "accuracy_top-1": 94.3662, "accuracy_top-5": 100.0}
